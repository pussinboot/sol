//@author: 
//@help: 
//@tags: mixer
//@credits:

Texture2D tex0: PREVIOUS;
Texture2D tex1 <string uiname="fbo";>;

SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=WRAP;AddressV=WRAP;};

float2 R:TARGETSIZE;
static const float PI = 3.14159265f;


cbuffer controls:register(b0){
	float sliderThreshold <float uimin=0.0; float uimax=1.0;> = 0.5;
	float sliderRGBOffset <float uimin=0.0; float uimax=1.0;> = 0.5;
	float time = 0.0;
	float2 bufferSize;
};

float2 forceFromAngle (float angle)
{
  	return float2(cos(angle), sin(angle));
}

float rand(float2 co){
    return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

float2 wrapUV (float2 uv)
{
	return abs(uv) % 1.0;
}

float4 rgbOffset (float2 uv, float angle, float radius)
{
	float4 color = 0.0;
	color.r = tex0.SampleLevel(s0, uv + float2(cos(angle), sin(angle)) * radius,0).r;
	color.g = tex0.SampleLevel(s0, uv + float2(cos(angle + 2.094395102), 	sin(angle + 2.094395102)) 	* radius,0).g;
	color.b = tex0.SampleLevel(s0, uv + float2(cos(angle + 4.188790205), 	sin(angle + 4.188790205)) 	* radius,0).b;
	return color;
}

float4 filter5x5 (float2 uv, float2 dimension)
{
  int filter[25] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
  float4 color = float4 (0.0,0.0,0.0,0.0);
  for (int i = 0; i < 5; ++i)
    for (int j = 0; j < 5; ++j) 
      color += tex0.SampleLevel(s0,uv + (float2(i - 2, j - 2) / dimension),0) * filter[i * 5 + j];
  return color;
}

float4 updateBufferWithColorFilter (float4 colorBuffer, float4 colorUpdate, float4 colorFromFilter, float treshold)
{
  	return lerp(colorBuffer, colorUpdate, step(treshold, (colorFromFilter.r + colorFromFilter.g + colorFromFilter.b) / 3.0));
}

float4 fadeOut (float4 color, float percent)
{
	return color * float4(percent,percent,percent, 1.0);
}

float4 pFire(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target{
	
	float2 force = forceFromAngle(rand(uv) * 2 * PI + time) + float2(0.0,0.8);
    force *= 2.0 / bufferSize.x;
	
	float t = sin(time) * 0.5 + 0.5;
	float t2 = sin(time * 2.0) * 0.5 + 0.5;
	
	float2 uvDisplaced = wrapUV(uv + force);
	float4 colorFbo = tex1.SampleLevel(s0, uvDisplaced, 0);
	
	float angle = time * 10.0;
	float radius =  sliderRGBOffset * 0.025 * t2;
	
	float4 colorVideo = rgbOffset( uv, angle, radius);
	
	float threshold = lerp(sliderThreshold, 0.3 + 0.2 * t, 1.0);
	float4 filtered = filter5x5(uv,bufferSize);

	float4 color = updateBufferWithColorFilter(fadeOut(colorFbo, 0.95), colorVideo, filtered, 1.0);
	
	
	return color;

}


technique10 Fire{
	pass P0
	{SetPixelShader(CompileShader(ps_4_0,pFire()));}
}
